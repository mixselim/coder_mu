/*UVA 336
Why RE? */
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>
using namespace std;

vector<int>G[100];
void bfs(int n,int src,vector<int>vec,int lvl)
{
    int cas=1;
    queue<int>Q;
    Q.push(src);
    int visited[100]={0},level[100]={0};
    int parent[100];
    visited[src]=1;
    level[src]=0;
    while(!Q.empty())
    {
        int u=Q.front();
        for(int i=0;i<G[u].size();i++)
        {
            int v=G[u][i];
            if(!visited[v])
            {
                level[v]=level[u]+1;
                parent[v]=u;
                visited[v]=1;
                Q.push(v);
            }
        }
        Q.pop();
    }
    int j=0,c=0,l=0,k=vec.size();
    while(l<k)
    {
        if(level[vec[l]]<=lvl)
            c++;
            l++;
    }
printf("Case %d: %d nodes not reachable from node %d with TTL = %d.\n",cas,l-c,src,lvl);
cas++;
}
int main()
{
    int i,x,y,n,lvl,src;
    while(scanf("%d",&n) && n)
    {
        vector<int> vec;
        for(i=1;i<=n;i++)
        {
            cin>>x;
            cin>>y;
            G[x].push_back(y);
            G[y].push_back(x);
            vec.push_back(x);
            vec.push_back(y);
        }
        sort(vec.begin(), vec.end());
        vec.erase(unique(vec.begin(), vec.end()), vec.end());

        while(scanf("%d %d",&src,&lvl) && (src!=0 || lvl!=0))
        {
            bfs(n,src,vec,lvl);
        }
        vec.clear();
    }
    return 0;
}
